package com.ioncannon.cpuburn.gpugflops;

import android.opengl.GLES20;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;

public class Square {
    static final int COORDS_PER_VERTEX = 3;
    static float[] squareCoords = new float[]{-1.0f, 1.0f, 0.0f, -1.0f, -1.0f, 0.0f, 1.0f, -1.0f, 0.0f, 1.0f, 1.0f, 0.0f};
    float[] color = new float[]{0.2f, 0.70980394f, 0.8980392f, 1.0f};
    private final ShortBuffer drawListBuffer;
    private final short[] drawOrder = new short[]{(short) 0, (short) 1, (short) 2, (short) 0, (short) 2, (short) 3};
    private final String fragmentShaderCode = "precision highp float;void main() {vec4 u_vColor1; vec4 haha; u_vColor1.r = mod((gl_FragCoord.x ) * 91.7, 256.0) / 255.0; u_vColor1.g = mod((gl_FragCoord.y ) * 92.7, 256.0) / 255.0; u_vColor1.b = 0.7; u_vColor1.a = 1.0; haha = vec4(0.9, 0.8, 0.7, 0.6);int iter; for(iter=0; iter<400; iter=iter+1){haha = haha * u_vColor1.rgba + u_vColor1.rgba;     haha = haha * u_vColor1.rgab + u_vColor1.rgab;     haha = haha * u_vColor1.rbga + u_vColor1.rbga;     haha = haha * u_vColor1.rbag+ u_vColor1.rbag;      haha = haha * u_vColor1.ragb + u_vColor1.ragb;     haha = haha * u_vColor1.rabg + u_vColor1.rabg;     haha = haha * u_vColor1.grba+u_vColor1.grba;     haha = haha * u_vColor1.grab+u_vColor1.grab;     haha = haha * u_vColor1.gbra+u_vColor1.gbra;     haha = haha * u_vColor1.gbar+u_vColor1.gbar;    haha = haha  * u_vColor1.garb+u_vColor1.garb;    haha = haha  * u_vColor1.gabr+u_vColor1.gabr;    haha = haha  * u_vColor1.brga+u_vColor1.brga;    haha = haha  * u_vColor1.brag+u_vColor1.rabg;     haha = haha * u_vColor1.bgra+u_vColor1.rabg;    haha = haha  * u_vColor1.bgar+u_vColor1.rabg;     haha = haha * u_vColor1.barg+u_vColor1.rabg;    haha = haha  * u_vColor1.bagr+u_vColor1.rabg;     haha = haha * u_vColor1.argb+u_vColor1.rabg;    haha = haha  * u_vColor1.arbg+u_vColor1.rabg;     haha = haha * u_vColor1.agrb+u_vColor1.rabg;     haha = haha * u_vColor1.agbr+u_vColor1.rabg;     haha = haha * u_vColor1.abrg+u_vColor1.rabg;    haha = haha  * u_vColor1.abgr+u_vColor1.rabg; haha = haha * u_vColor1.rgab+ vec4(0.9, 0.8, 0.7, 0.6); } gl_FragColor = vec4(0.9, 0.8, 0.7, 0.6) * haha;}";
    private final String fragmentShaderCodeFP16 = "precision mediump float;void main() {vec4 u_vColor1; vec4 haha; u_vColor1.r = mod((gl_FragCoord.x ) * 91.7, 256.0) / 255.0; u_vColor1.g = mod((gl_FragCoord.y ) * 92.7, 256.0) / 255.0; u_vColor1.b = 0.7; u_vColor1.a = 1.0; haha = vec4(0.9, 0.8, 0.7, 0.6);int iter; for(iter=0; iter<400; iter=iter+1){haha = haha * u_vColor1.rgba + u_vColor1.rgba;     haha = haha * u_vColor1.rgab + u_vColor1.rgab;     haha = haha * u_vColor1.rbga + u_vColor1.rbga;     haha = haha * u_vColor1.rbag+ u_vColor1.rbag;      haha = haha * u_vColor1.ragb + u_vColor1.ragb;     haha = haha * u_vColor1.rabg + u_vColor1.rabg;     haha = haha * u_vColor1.grba+u_vColor1.grba;     haha = haha * u_vColor1.grab+u_vColor1.grab;     haha = haha * u_vColor1.gbra+u_vColor1.gbra;     haha = haha * u_vColor1.gbar+u_vColor1.gbar;    haha = haha  * u_vColor1.garb+u_vColor1.garb;    haha = haha  * u_vColor1.gabr+u_vColor1.gabr;    haha = haha  * u_vColor1.brga+u_vColor1.brga;    haha = haha  * u_vColor1.brag+u_vColor1.rabg;     haha = haha * u_vColor1.bgra+u_vColor1.rabg;    haha = haha  * u_vColor1.bgar+u_vColor1.rabg;     haha = haha * u_vColor1.barg+u_vColor1.rabg;    haha = haha  * u_vColor1.bagr+u_vColor1.rabg;     haha = haha * u_vColor1.argb+u_vColor1.rabg;    haha = haha  * u_vColor1.arbg+u_vColor1.rabg;     haha = haha * u_vColor1.agrb+u_vColor1.rabg;     haha = haha * u_vColor1.agbr+u_vColor1.rabg;     haha = haha * u_vColor1.abrg+u_vColor1.rabg;    haha = haha  * u_vColor1.abgr+u_vColor1.rabg; haha = haha * u_vColor1.rgab+ vec4(0.9, 0.8, 0.7, 0.6); } gl_FragColor = vec4(0.9, 0.8, 0.7, 0.6) * haha;}";
    private final String fragmentShaderCodeScalar = "precision highp float;void main() {vec4 u_vColor1; float haha; u_vColor1.r = mod((gl_FragCoord.x ) * 91.7, 256.0) / 255.0; u_vColor1.g = mod((gl_FragCoord.y ) * 92.7, 256.0) / 255.0; u_vColor1.b = 0.7; u_vColor1.a = 1.0; haha = 0.9;int iter; for(iter=0; iter<1600; iter=iter+1){     haha = haha * u_vColor1.r + u_vColor1.r;     haha = haha * u_vColor1.r + u_vColor1.b;     haha = haha * u_vColor1.r + u_vColor1.g;     haha = haha * u_vColor1.r + u_vColor1.a;      haha = haha * u_vColor1.r + u_vColor1.r;     haha = haha * u_vColor1.r + u_vColor1.b;     haha = haha * u_vColor1.g+u_vColor1.r;     haha = haha * u_vColor1.g+u_vColor1.a;     haha = haha * u_vColor1.g+u_vColor1.b;     haha = haha * u_vColor1.g+u_vColor1.g;    haha = haha  * u_vColor1.g+u_vColor1.r;    haha = haha  * u_vColor1.g+u_vColor1.b;    haha = haha  * u_vColor1.b+u_vColor1.r;    haha = haha  * u_vColor1.b+u_vColor1.a;     haha = haha * u_vColor1.b+u_vColor1.b;    haha = haha  * u_vColor1.b+u_vColor1.g;     haha = haha * u_vColor1.b+u_vColor1.a;    haha = haha  * u_vColor1.b+u_vColor1.g;     haha = haha * u_vColor1.a+u_vColor1.r;    haha = haha  * u_vColor1.a+u_vColor1.a;     haha = haha * u_vColor1.a+u_vColor1.b;     haha = haha * u_vColor1.a+u_vColor1.g;     haha = haha * u_vColor1.a+u_vColor1.a;    haha = haha  * u_vColor1.a+u_vColor1.g; haha = haha * u_vColor1.r + 0.9; } gl_FragColor = vec4(0.9, 0.8, 0.7, 0.6) * haha;}";
    private final String fragmentShaderCodeScalarFP16 = "precision mediump float;void main() {vec4 u_vColor1; float haha; u_vColor1.r = mod((gl_FragCoord.x ) * 91.7, 256.0) / 255.0; u_vColor1.g = mod((gl_FragCoord.y ) * 92.7, 256.0) / 255.0; u_vColor1.b = 0.7; u_vColor1.a = 1.0; haha = 0.9;int iter; for(iter=0; iter<1600; iter=iter+1){     haha = haha * u_vColor1.r + u_vColor1.r;     haha = haha * u_vColor1.r + u_vColor1.b;     haha = haha * u_vColor1.r + u_vColor1.g;     haha = haha * u_vColor1.r + u_vColor1.a;      haha = haha * u_vColor1.r + u_vColor1.r;     haha = haha * u_vColor1.r + u_vColor1.b;     haha = haha * u_vColor1.g+u_vColor1.r;     haha = haha * u_vColor1.g+u_vColor1.a;     haha = haha * u_vColor1.g+u_vColor1.b;     haha = haha * u_vColor1.g+u_vColor1.g;    haha = haha  * u_vColor1.g+u_vColor1.r;    haha = haha  * u_vColor1.g+u_vColor1.b;    haha = haha  * u_vColor1.b+u_vColor1.r;    haha = haha  * u_vColor1.b+u_vColor1.a;     haha = haha * u_vColor1.b+u_vColor1.b;    haha = haha  * u_vColor1.b+u_vColor1.g;     haha = haha * u_vColor1.b+u_vColor1.a;    haha = haha  * u_vColor1.b+u_vColor1.g;     haha = haha * u_vColor1.a+u_vColor1.r;    haha = haha  * u_vColor1.a+u_vColor1.a;     haha = haha * u_vColor1.a+u_vColor1.b;     haha = haha * u_vColor1.a+u_vColor1.g;     haha = haha * u_vColor1.a+u_vColor1.a;    haha = haha  * u_vColor1.a+u_vColor1.g; haha = haha * u_vColor1.r + 0.9; } gl_FragColor = vec4(0.9, 0.8, 0.7, 0.6) * haha;}";
    private int mColorHandle;
    private int mMVPMatrixHandle;
    private int mPositionHandle;
    private final int mProgram;
    private final FloatBuffer vertexBuffer;
    private final String vertexShaderCode = "attribute vec4 vPosition;void main() {  gl_Position = vPosition;}";
    private final int vertexStride = 12;

    public Square(boolean scalar, boolean fp32) {
        int fragmentShader;
        ByteBuffer bb = ByteBuffer.allocateDirect(squareCoords.length * 4);
        bb.order(ByteOrder.nativeOrder());
        this.vertexBuffer = bb.asFloatBuffer();
        this.vertexBuffer.put(squareCoords);
        this.vertexBuffer.position(0);
        ByteBuffer dlb = ByteBuffer.allocateDirect(this.drawOrder.length * 2);
        dlb.order(ByteOrder.nativeOrder());
        this.drawListBuffer = dlb.asShortBuffer();
        this.drawListBuffer.put(this.drawOrder);
        this.drawListBuffer.position(0);
        int vertexShader = MyGLRenderer.loadShader(35633, "attribute vec4 vPosition;void main() {  gl_Position = vPosition;}");
        if (scalar) {
            if (fp32) {
                fragmentShader = MyGLRenderer.loadShader(35632, "precision highp float;void main() {vec4 u_vColor1; float haha; u_vColor1.r = mod((gl_FragCoord.x ) * 91.7, 256.0) / 255.0; u_vColor1.g = mod((gl_FragCoord.y ) * 92.7, 256.0) / 255.0; u_vColor1.b = 0.7; u_vColor1.a = 1.0; haha = 0.9;int iter; for(iter=0; iter<1600; iter=iter+1){     haha = haha * u_vColor1.r + u_vColor1.r;     haha = haha * u_vColor1.r + u_vColor1.b;     haha = haha * u_vColor1.r + u_vColor1.g;     haha = haha * u_vColor1.r + u_vColor1.a;      haha = haha * u_vColor1.r + u_vColor1.r;     haha = haha * u_vColor1.r + u_vColor1.b;     haha = haha * u_vColor1.g+u_vColor1.r;     haha = haha * u_vColor1.g+u_vColor1.a;     haha = haha * u_vColor1.g+u_vColor1.b;     haha = haha * u_vColor1.g+u_vColor1.g;    haha = haha  * u_vColor1.g+u_vColor1.r;    haha = haha  * u_vColor1.g+u_vColor1.b;    haha = haha  * u_vColor1.b+u_vColor1.r;    haha = haha  * u_vColor1.b+u_vColor1.a;     haha = haha * u_vColor1.b+u_vColor1.b;    haha = haha  * u_vColor1.b+u_vColor1.g;     haha = haha * u_vColor1.b+u_vColor1.a;    haha = haha  * u_vColor1.b+u_vColor1.g;     haha = haha * u_vColor1.a+u_vColor1.r;    haha = haha  * u_vColor1.a+u_vColor1.a;     haha = haha * u_vColor1.a+u_vColor1.b;     haha = haha * u_vColor1.a+u_vColor1.g;     haha = haha * u_vColor1.a+u_vColor1.a;    haha = haha  * u_vColor1.a+u_vColor1.g; haha = haha * u_vColor1.r + 0.9; } gl_FragColor = vec4(0.9, 0.8, 0.7, 0.6) * haha;}");
            } else {
                fragmentShader = MyGLRenderer.loadShader(35632, "precision mediump float;void main() {vec4 u_vColor1; float haha; u_vColor1.r = mod((gl_FragCoord.x ) * 91.7, 256.0) / 255.0; u_vColor1.g = mod((gl_FragCoord.y ) * 92.7, 256.0) / 255.0; u_vColor1.b = 0.7; u_vColor1.a = 1.0; haha = 0.9;int iter; for(iter=0; iter<1600; iter=iter+1){     haha = haha * u_vColor1.r + u_vColor1.r;     haha = haha * u_vColor1.r + u_vColor1.b;     haha = haha * u_vColor1.r + u_vColor1.g;     haha = haha * u_vColor1.r + u_vColor1.a;      haha = haha * u_vColor1.r + u_vColor1.r;     haha = haha * u_vColor1.r + u_vColor1.b;     haha = haha * u_vColor1.g+u_vColor1.r;     haha = haha * u_vColor1.g+u_vColor1.a;     haha = haha * u_vColor1.g+u_vColor1.b;     haha = haha * u_vColor1.g+u_vColor1.g;    haha = haha  * u_vColor1.g+u_vColor1.r;    haha = haha  * u_vColor1.g+u_vColor1.b;    haha = haha  * u_vColor1.b+u_vColor1.r;    haha = haha  * u_vColor1.b+u_vColor1.a;     haha = haha * u_vColor1.b+u_vColor1.b;    haha = haha  * u_vColor1.b+u_vColor1.g;     haha = haha * u_vColor1.b+u_vColor1.a;    haha = haha  * u_vColor1.b+u_vColor1.g;     haha = haha * u_vColor1.a+u_vColor1.r;    haha = haha  * u_vColor1.a+u_vColor1.a;     haha = haha * u_vColor1.a+u_vColor1.b;     haha = haha * u_vColor1.a+u_vColor1.g;     haha = haha * u_vColor1.a+u_vColor1.a;    haha = haha  * u_vColor1.a+u_vColor1.g; haha = haha * u_vColor1.r + 0.9; } gl_FragColor = vec4(0.9, 0.8, 0.7, 0.6) * haha;}");
            }
        } else if (fp32) {
            fragmentShader = MyGLRenderer.loadShader(35632, "precision highp float;void main() {vec4 u_vColor1; vec4 haha; u_vColor1.r = mod((gl_FragCoord.x ) * 91.7, 256.0) / 255.0; u_vColor1.g = mod((gl_FragCoord.y ) * 92.7, 256.0) / 255.0; u_vColor1.b = 0.7; u_vColor1.a = 1.0; haha = vec4(0.9, 0.8, 0.7, 0.6);int iter; for(iter=0; iter<400; iter=iter+1){haha = haha * u_vColor1.rgba + u_vColor1.rgba;     haha = haha * u_vColor1.rgab + u_vColor1.rgab;     haha = haha * u_vColor1.rbga + u_vColor1.rbga;     haha = haha * u_vColor1.rbag+ u_vColor1.rbag;      haha = haha * u_vColor1.ragb + u_vColor1.ragb;     haha = haha * u_vColor1.rabg + u_vColor1.rabg;     haha = haha * u_vColor1.grba+u_vColor1.grba;     haha = haha * u_vColor1.grab+u_vColor1.grab;     haha = haha * u_vColor1.gbra+u_vColor1.gbra;     haha = haha * u_vColor1.gbar+u_vColor1.gbar;    haha = haha  * u_vColor1.garb+u_vColor1.garb;    haha = haha  * u_vColor1.gabr+u_vColor1.gabr;    haha = haha  * u_vColor1.brga+u_vColor1.brga;    haha = haha  * u_vColor1.brag+u_vColor1.rabg;     haha = haha * u_vColor1.bgra+u_vColor1.rabg;    haha = haha  * u_vColor1.bgar+u_vColor1.rabg;     haha = haha * u_vColor1.barg+u_vColor1.rabg;    haha = haha  * u_vColor1.bagr+u_vColor1.rabg;     haha = haha * u_vColor1.argb+u_vColor1.rabg;    haha = haha  * u_vColor1.arbg+u_vColor1.rabg;     haha = haha * u_vColor1.agrb+u_vColor1.rabg;     haha = haha * u_vColor1.agbr+u_vColor1.rabg;     haha = haha * u_vColor1.abrg+u_vColor1.rabg;    haha = haha  * u_vColor1.abgr+u_vColor1.rabg; haha = haha * u_vColor1.rgab+ vec4(0.9, 0.8, 0.7, 0.6); } gl_FragColor = vec4(0.9, 0.8, 0.7, 0.6) * haha;}");
        } else {
            fragmentShader = MyGLRenderer.loadShader(35632, "precision mediump float;void main() {vec4 u_vColor1; vec4 haha; u_vColor1.r = mod((gl_FragCoord.x ) * 91.7, 256.0) / 255.0; u_vColor1.g = mod((gl_FragCoord.y ) * 92.7, 256.0) / 255.0; u_vColor1.b = 0.7; u_vColor1.a = 1.0; haha = vec4(0.9, 0.8, 0.7, 0.6);int iter; for(iter=0; iter<400; iter=iter+1){haha = haha * u_vColor1.rgba + u_vColor1.rgba;     haha = haha * u_vColor1.rgab + u_vColor1.rgab;     haha = haha * u_vColor1.rbga + u_vColor1.rbga;     haha = haha * u_vColor1.rbag+ u_vColor1.rbag;      haha = haha * u_vColor1.ragb + u_vColor1.ragb;     haha = haha * u_vColor1.rabg + u_vColor1.rabg;     haha = haha * u_vColor1.grba+u_vColor1.grba;     haha = haha * u_vColor1.grab+u_vColor1.grab;     haha = haha * u_vColor1.gbra+u_vColor1.gbra;     haha = haha * u_vColor1.gbar+u_vColor1.gbar;    haha = haha  * u_vColor1.garb+u_vColor1.garb;    haha = haha  * u_vColor1.gabr+u_vColor1.gabr;    haha = haha  * u_vColor1.brga+u_vColor1.brga;    haha = haha  * u_vColor1.brag+u_vColor1.rabg;     haha = haha * u_vColor1.bgra+u_vColor1.rabg;    haha = haha  * u_vColor1.bgar+u_vColor1.rabg;     haha = haha * u_vColor1.barg+u_vColor1.rabg;    haha = haha  * u_vColor1.bagr+u_vColor1.rabg;     haha = haha * u_vColor1.argb+u_vColor1.rabg;    haha = haha  * u_vColor1.arbg+u_vColor1.rabg;     haha = haha * u_vColor1.agrb+u_vColor1.rabg;     haha = haha * u_vColor1.agbr+u_vColor1.rabg;     haha = haha * u_vColor1.abrg+u_vColor1.rabg;    haha = haha  * u_vColor1.abgr+u_vColor1.rabg; haha = haha * u_vColor1.rgab+ vec4(0.9, 0.8, 0.7, 0.6); } gl_FragColor = vec4(0.9, 0.8, 0.7, 0.6) * haha;}");
        }
        this.mProgram = GLES20.glCreateProgram();
        GLES20.glAttachShader(this.mProgram, vertexShader);
        GLES20.glAttachShader(this.mProgram, fragmentShader);
        GLES20.glLinkProgram(this.mProgram);
    }

    public void draw(float[] mvpMatrix) {
        GLES20.glUseProgram(this.mProgram);
        this.mPositionHandle = GLES20.glGetAttribLocation(this.mProgram, "vPosition");
        GLES20.glEnableVertexAttribArray(this.mPositionHandle);
        GLES20.glVertexAttribPointer(this.mPositionHandle, 3, 5126, false, 12, this.vertexBuffer);
        this.mColorHandle = GLES20.glGetUniformLocation(this.mProgram, "vColor");
        GLES20.glUniform4fv(this.mColorHandle, 1, this.color, 0);
        this.mMVPMatrixHandle = GLES20.glGetUniformLocation(this.mProgram, "uMVPMatrix");
        MyGLRenderer.checkGlError("glGetUniformLocation");
        GLES20.glUniformMatrix4fv(this.mMVPMatrixHandle, 1, false, mvpMatrix, 0);
        MyGLRenderer.checkGlError("glUniformMatrix4fv");
        GLES20.glDrawElements(4, this.drawOrder.length, 5123, this.drawListBuffer);
        GLES20.glDisableVertexAttribArray(this.mPositionHandle);
    }
}
